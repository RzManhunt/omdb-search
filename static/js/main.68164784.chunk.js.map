{"version":3,"sources":["components/Title.js","components/SearchForm.js","components/Movie.js","components/MoviesList.js","components/Credits.js","components/Home.js","components/Detail.js","components/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Title","children","API_KEY","SearchForm","state","inputMovie","_handleChange","e","setState","target","value","_handleSubmit","preventDefault","fetch","then","response","json","data","console","log","Search","props","onResults","className","onSubmit","this","onChange","name","type","placeholder","Component","Movie","movie","imdbID","Poster","Year","to","src","alt","title","MoviesList","movies","map","index","key","Credits","href","Home","usedSearch","results","_handleResults","_renderResults","length","Detail","_fetchMovie","id","match","params","Actors","Metascore","Plot","Director","Genre","Runtime","imdbRating","NotFound","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.68164784.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Title = ({ children }) => (\n\t<h1>{children}</h1>\n)","import React, { Component } from 'react';\n\nconst API_KEY = '4287ad07';\n\nexport class SearchForm extends Component {\n\tstate = { inputMovie: '' }\n\n\t_handleChange = (e) => {\n\t\tthis.setState({ inputMovie: e.target.value })\n\t}\n\n\t_handleSubmit = (e) => {\n\t\te.preventDefault()\n\t\tconst { inputMovie } = this.state\n\n\t\tfetch(`https://www.omdbapi.com/?apikey=${API_KEY}&s=${inputMovie}`)\n\t\t.then(response => response.json())\n\t\t.then(data => {\nconsole.log(data);\n\t\t\tconst { Search = [] } = data\n\t\t\tthis.props.onResults(Search)\n\t\t})\n\t}\n\n\trender(){\n\t\treturn(\n\t\t\t<form className=\"searchform\" onSubmit={this._handleSubmit}>\n\t\t\t\t<input\n\t\t\t\t\tonChange={this._handleChange}\n\t\t\t\t\tname=\"movie\"\n\t\t\t\t\tclassName=\"searchform-input\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tplaceholder=\"Busca peliculas, series, videojuegos...\"\n\t\t\t\t/>\n\t\t\t\t<button className=\"searchform-button\">\n\t\t\t\t\tBuscar\n\t\t\t\t</button>\n\t\t\t</form>\n\t\t)\n\t}\n}","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport class Movie extends Component {\n\tstatic propTypes = {\n\t\tid: PropTypes.string,\n\t\tmovie: PropTypes.object\n\t}\n\n\trender(){\n\t\tconst { imdbID, Poster, Title, Year } = this.props.movie\n\t\treturn(\n\t\t\t<Link to={`/detalle/${imdbID}`} className=\"movie-card\">\n\t\t\t\t<img src={Poster} alt={Title} className=\"movie-img\" />\n\t\t\t\t<div className=\"movie-info\">\n\t\t\t\t\t<h2 className=\"movie-title\" title={Title}>\n\t\t\t\t\t\t{Title}\n\t\t\t\t\t</h2>\n\t\t\t\t\t<div className=\"movie-year\">\n\t\t\t\t\t\tRelease year: {Year}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</Link>\n\t\t)\n\t}\n}","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Movie } from './Movie';\n\nexport class MoviesList extends Component {\n\tstatic propTypes = {\n\t\tmovies: PropTypes.array\n\t}\n\n\trender(){\n\t\tconst { movies } = this.props\n\t\treturn(\n\t\t\t<div className=\"movies-list\">\n\t\t\t\t{\n\t\t\t\t\tmovies.map((movie, index) => {\n\t\t\t\t\t\treturn(\n\t\t\t\t\t\t\t<Movie \n\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\tmovie={movie}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</div>\n\t\t)\n\t}\n}","import React from 'react';\n\nexport const Credits = () => {\n\treturn(\n\t\t<div className=\"credits\">\n\t\t\t<strong>Creado por Luis Moreno</strong>\n\t\t\t<div>\n\t\t\t\t<span>Resultados obtenidos de </span>\n\t\t\t\t<a href=\"http://www.omdbapi.com/\">\n\t\t\t\t\t<strong>OMDB API</strong>\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t</div>\n\t)\n}","import React, { Component } from 'react';\nimport { Title } from './Title';\nimport { SearchForm } from './SearchForm';\nimport { MoviesList } from './MoviesList';\nimport { Credits } from './Credits';\n\nexport class Home extends Component {\n\tstate = { \n\t\tusedSearch: false,\n\t\tresults: []\n\t}\n\n\t_handleResults = (results) => {\n\t\tthis.setState({ results, usedSearch: true })\n\t}\n\n\t_renderResults = () => {\n\t\tconst { results } = this.state\n\n\t\treturn (\n\t\t\tresults.length === 0\n\t      \t? 'Sin Resultados'\n\t      \t: <MoviesList movies={results} />\n      \t)\n\t}\n\n\trender(){\n\t\treturn (\n\t\t    <div>\n\t\t      <Title>Buscador OMDB</Title>\n\t\t      <div className=\"searchform-wrapper\">\n\t\t      \t<SearchForm onResults={this._handleResults} />\n\t\t      </div>\n\t\t      {\n\t\t      \tthis.state.usedSearch === false\n\t\t      \t? <Credits />\n\t\t      \t: this._renderResults()\n\t\t      }\n\t\t    </div>\n\t\t)\n\t}\n}","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nconst API_KEY = '4287ad07';\n\nexport class Detail extends Component {\n\tstatic propTypes = {\n\t\tmatch: PropTypes.shape({\n\t\t\tparams: PropTypes.object,\n\t\t\tisExact: PropTypes.bool,\n\t\t\tpath: PropTypes.string,\n\t\t\turl: PropTypes.string\n\t\t})\n\t}\n\n\tstate = { movie: {} }\n\n\t_fetchMovie = (id) => {\n\t\tfetch(`http://www.omdbapi.com/?apikey=${API_KEY}&i=${id}`)\n\t\t.then(response => response.json())\n\t\t.then(movie => {\n\t\t\tconsole.log({ movie })\n\t\t\tthis.setState({ movie })\n\t\t})\n\t}\n\n\tcomponentDidMount(){\n\t\tconst { id } = this.props.match.params\n\t\tthis._fetchMovie(id)\n\t}\n\trender(){\n\t\tconst {\n\t\t\t\tActors,\n\t\t\t\tMetascore,\n\t\t\t\tPlot,\n\t\t\t\tPoster,\n\t\t\t\tTitle,\n\t\t\t\t\n\t\t\t\tDirector,\n\t\t\t\tGenre,\n\t\t\t\tRuntime,\n\t\t\t\timdbRating\n\t\t\t} = this.state.movie\n\t\treturn(\t\n\t\t\t\t<div className=\"movie-detail\">\n\t\t\t\t\t<div className=\"movie-detail-poster\">\n\t\t\t\t\t\t<h1>{Title}</h1>\n\t\t\t\t\t\t<img src={Poster} alt={Title} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"movie-detail-info\">\n\t\t\t\t\t\t<h4>Genero:</h4>\n\t\t\t\t\t\t<p>{Genre}</p>\n\t\t\t\t\t\t<h4>Duracion:</h4>\n\t\t\t\t\t\t<p>{Runtime}</p>\n\t\t\t\t\t\t<h4>Director:</h4>\n\t\t\t\t\t\t<p>{Director}</p>\n\t\t\t\t\t\t<h4>Actores:</h4>\n\t\t\t\t\t\t<p>{Actors}</p>\n\t\t\t\t\t\t<div className=\"ratings-inline\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<h4>Metascore:</h4>\n\t\t\t\t\t\t\t\t<p>{Metascore}</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"imdb-rating\">\n\t\t\t\t\t\t\t\t<h4>IMDb Rating:</h4>\n\t\t\t\t\t\t\t\t<p>{imdbRating}</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<h4>Sinopsis:</h4>\n\t\t\t\t\t\t<p>{Plot}</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t)\n\t}\n}","import React from 'react';\n\nexport const NotFound = () => (\n\t<>\n\t\t<h1 className=\"not-found\">\n\t\t\tNot Found  |  404\n\t\t</h1>\n\t</>\n)","import React, { Component } from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport { Home } from './components/Home';\nimport { Detail } from './components/Detail';\nimport { NotFound } from './components/NotFound';\nimport './App.css';\n\nclass App extends Component {\n\trender(){\n\t\treturn (\n\t\t    <div className=\"App\">\n\t\t    \t<Switch>\n\t\t    \t\t<Route exact path='/' component={Home} />\n\t\t    \t\t<Route path='/detalle/:id' component={Detail} />\n\t\t    \t\t<Route component={NotFound} />\n\t\t    \t</Switch>\n\t\t    </div>\n\t\t)\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<HashRouter basename=\"/\">\n\t\t<App />\n\t</HashRouter>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}